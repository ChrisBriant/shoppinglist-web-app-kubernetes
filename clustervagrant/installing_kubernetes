Setting Up Kubernetes

Install container runtime on all nodes

1. Forwarding IPv4 and letting iptables see bridged traffic

On all nodes

sudo modprobe overlay
sudo modprobe br_netfilter

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

2. Verify the processess below are running on all three nodes

lsmod | grep br_netfilter
lsmod | grep overlay

3. Check the following variables are set to one on all three nodes

sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward

4. Install containerd runtime

5. Getting started with container d

https://github.com/containerd/containerd/blob/main/docs/getting-started.md

Use the apt-get package manager

6.Go to https://docs.docker.com/engine/install/ubuntu/

7. Setup repository

ON EACH NODE

 sudo apt-get update
 sudo apt-get install ca-certificates curl gnupg


 sudo install -m 0755 -d /etc/apt/keyrings
 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
 sudo chmod a+r /etc/apt/keyrings/docker.gpg
 
 echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  
  sudo apt-get update
  
  #WE ONLY INSTALL container.d NOT THE OTHER DOCKER STUFF
  
  sudo apt-get install containerd.io
  
  
 8. Check running
 
 ON ALL NODES
 
 systemctl status containerd
 
 9. cgroup drivers
 
 Need to run systemd in this examle
 
 "ps -p 1" command tells you it is systemd
 
 Configure systemd driver
 
 ON ALL NODES
 
 	1. sudo vi /etc/containerd/config.toml
	2. :1,$d delete all config in the file
	3. Paste config below:
	
[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
    SystemdCgroup = true
    	4. Save :wq!
    	5. sudo systemctl restart containerd
    	
 Installing kubeadm, kubelet and kubectl
 
 https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
 
1. 
 
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl

2. 

curl -fsSL https://dl.k8s.io/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg

3. 

echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

4.

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl


INITIALIZE CONTROL PLANE

ON MASTER ONLY

1. 

sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=192.168.56.2

2.

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

3. Copy command to join nodes

4. Install addons

https://kubernetes.io/docs/concepts/cluster-administration/addons/
Example using Weave Net
https://www.weave.works/docs/net/latest/kubernetes/kube-addon/

ON MASTER NODE ONLY

kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

5. Run following to confirm daemonset has been installed

kubectl get pods --all-namespaces

6. Check that the cidr from step 1 is in the right range

Run following

	1. kubectl get daemonset --all-namespaces
	2. kubectl edit daemonset weave-net --namespace kube-system

	Scroll down to find weave container
	
	3. Add environment variable
	
	LOOKS LIKE
	
	containers:
		- name: weave
		  env:
		    - name: IPALLOC_RANGE
		      value: 10.0.0.0/16
		      
	Add following under env
	
	- name: IPALLOC_RANGE
	  value: 10.244.0.0/16
	  
	4. save and exit
	
	5. Check weave-net-qtb89 is running
		kubectl get pods --all-namespaces
	
	
	

JOIN WORKER NODES TO CLUSTER

ON WORKER NODES

1. Command from above taken after step 2 has completed install

sudo kubeadm join 192.168.56.2:6443 --token 8fbpu9.t6r78wtz20n0triv --discovery-token-ca-cert-hash sha256:91308646fdab2c5a317dfd270934b91f6fb455247e25e51d240677ae1dc0aa3c 

2. Verify working

kubectl get nodes


TRANSFER FILES

1. Edit the sshd config

sudo vi /etc/ssh/sshd_config

Change password authentication value to "yes"

2. sudo systemctl restart sshd.service

3. From explorer window run sftp://vagrant@192.168.56.2/home/vagrant/



	






 
